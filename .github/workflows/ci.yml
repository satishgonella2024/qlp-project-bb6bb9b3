```yaml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans

jobs:
  setup:
    name: Setup Go Environment
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.setup-go.outputs.version }}
    steps:
      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.17'

  lint:
    name: Linting
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ needs.setup.outputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ needs.setup.outputs.go-version }}-
      - name: Run golint
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...
      - name: Run go fmt
        run: go fmt ./...

  test:
    name: Run Tests
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ needs.setup.outputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ needs.setup.outputs.go-version }}-
      - name: Run tests with coverage
        run: |
          go test ./... -coverprofile=coverage.out
          go tool cover -html=coverage.out -o coverage.html

  build:
    name: Build and Dockerize
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: user/app:latest

  security_scan:
    name: Security Scanning
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Gosec Security Scanner
        uses: securego/gosec-action@v2
        with:
          args: './...'

  release:
    name: Create Release
    needs: security_scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1.17'
      - name: Build binary
        run: go build -o main .
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./main
          asset_name: main
          asset_content_type: application/octet-stream
```